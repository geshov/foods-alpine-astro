---
import "@fontsource-variable/inter";
import "../assets/css/global.css";

import { getCollection } from "astro:content";
import { sortDishes } from "../utils/helpers";

import Theme from "../components/Theme.astro";
import Navbar from "../components/Navbar.astro";

const recipes = sortDishes(await getCollection("recipes")).map((recipe) => ({
  data: recipe.data,
  slug: recipe.slug,
}));
---

<html lang="ru">
  <head>
    <meta charset="utf-8" />
    <meta name="robots" content="noindex, nofollow, noarchive" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Foods</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  </head>
  <body>
    <Theme />
    <Navbar />
  </body>
</html>

<script>
  import "boxicons";
  import Alpine from "alpinejs";
  window["Alpine"] = Alpine;
  Alpine.start();
</script>

<script define:vars={{ recipes }}>
  document.addEventListener("alpine:init", () => {
    Alpine.store("global", {
      select: [],
      buy: [],

      get recipes() {
        return recipes;
      },

      get count() {
        return {
          dishes: this.recipes.length,
          select: this.select.length,
          foods: this.foods.length,
        };
      },

      get menu() {
        return this.recipes.filter((dish) => this.select.includes(dish.slug));
      },

      get foods() {
        let menuFoods = [];
        this.menu.forEach((dish) => {
          const dishFoods = dish.data.foods.map((food, index) => ({
            slug: dish.slug + "-" + index,
            name: food,
            dish: dish.data.name,
          }));
          menuFoods = [...menuFoods, ...dishFoods];
        });
        return menuFoods;
      },

      toggleSelect(dish) {
        const index = this.select.indexOf(dish.slug);
        if (index === -1) this.select.push(dish.slug);
        else this.select.splice(index, 1);
      },
    });
  });
</script>
