---
import { getCollection } from "astro:content";
const recipes = await getCollection("recipes");
---

<section class="_section">
  <div class="_container">
    <div x-data=`foods`>
      <div class="flex justify-between gap-2 pb-6">
        <div class="indicator flex-grow flex-shrink pt-1">
          <span
            x-text="dishes.length"
            class="indicator-item badge font-medium me-6"
          >
          </span>
          <button
            @click="view = 'dishes'"
            class="btn btn-square btn-outline w-full"
            :class="view ==='dishes' && 'btn-active'"
          >
            <box-icon type="solid" name="dish" class="fill-current"></box-icon>
          </button>
        </div>

        <div class="indicator flex-grow flex-shrink pt-1">
          <span
            x-text="menu.length"
            class="indicator-item badge font-medium me-6"
          >
          </span>
          <button
            @click="view = 'menu'"
            class="btn btn-square btn-outline w-full"
            :class="view ==='menu' && 'btn-active'"
          >
            <box-icon type="solid" name="food-menu" class="fill-current"
            ></box-icon>
          </button>
        </div>

        <div class="indicator flex-grow flex-shrink pt-1">
          <span
            x-text="foods.length"
            class="indicator-item badge font-medium me-6"
          >
          </span>
          <button
            @click="view = 'foods'"
            class="btn btn-square btn-outline w-full"
            :class="view ==='foods' && 'btn-active'"
          >
            <box-icon type="solid" name="cart" class="fill-current"></box-icon>
          </button>
        </div>
      </div>

      <div x-show="view === 'dishes'">
        <div>dishes</div>
      </div>

      <div x-show="view === 'menu'">
        <div>menu</div>
      </div>

      <div x-show="view === 'foods'">
        <div>foods</div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ recipes }}>
  document.addEventListener("alpine:init", () => {
    Alpine.data("foods", () => ({
      view: "dishes",
      term: "",

      get dishes() {
        return recipes.filter((dish) =>
          dish.data.name.toLowerCase().includes(this.term)
        );
      },

      get menu() {
        return recipes.map((dish) => dish);
      },

      get foods() {
        return recipes.map((dish) => dish);
      },
    }));
  });
</script>
